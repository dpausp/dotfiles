source ~/.keychain/`hostname`-sh &> /dev/null
source ~/.dotfiles/z.sh

export FZF_DEFAULT_COMMAND='fd'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

### zsh settings

bindkey -M vicmd '^R' history-incremental-search-backward
bindkey -M viins '^R' history-incremental-search-backward

bindkey -M viins "^[[5~" history-beginning-search-backward
bindkey -M viins "^[[6~" history-beginning-search-forward


bindkey -M viins "^[OA" history-beginning-search-backward
bindkey -M viins "^[OB" history-beginning-search-forward


bindkey -M viins "^[OH" vi-beginning-of-line
bindkey -M viins "^[OF" vi-end-of-line

bindkey -M vicmd "^[OH" vi-beginning-of-line
bindkey -M vicmd "^[OF" vi-end-of-line

bindkey -M viins '^[.' insert-last-word
bindkey -M vicmd '^[.' insert-last-word


bindkey -M viins '^[^?' backward-kill-word # Alt-Backspace


export KEYTIMEOUT=2

bindkey -M vicmd '\ef'   forward-word                      # Alt-f
bindkey -M vicmd '\eb'   backward-word                     # Alt-b
bindkey -M vicmd '\ed'   kill-word         # Alt-d

bindkey -M viins '\ef'   forward-word      # Alt-f
bindkey -M viins '\eb'   backward-word     # Alt-b
bindkey -M viins '\ed'   kill-word         # Alt-d

# disable hosts completion because I use /etc/hosts to block many unwanted sites that would appear as completions without that setting
zstyle ':completion:*:*:*' hosts off

export PATH=$PATH:~/.scripts/:~/progs/bin:~/.local/bin/
export LC_MESSAGES=C
export EDITOR=vim
export GIT_PAGER="vim -R -"

### aliases and functions

### git

alias gita="git add"
alias gitd="git diff"
alias gitdc="git diff --cached"
alias gitl="git log"
alias gitls='git log --pretty=format:"%H %as %s (%an)"'
alias gitc="git commit"
alias gits="git status"
alias gitb="git bisect"
alias gitp="git push"
alias gmv="git move"
alias grm="git rm"
alias gms="git merge --squash"

alias gitaww="git diff -w --no-color | git apply --cached --ignore-whitespace" # add changes, ignore whitespace

### git annex

alias x="git annex"
alias xs="x sync vdr belakor && (cd ~/annex/belakor; x sync)"
function xg {
    git annex get "$@"
    git annex copy --to belakor "$@"
}

### docker

alias d='docker'
alias sd="sudo docker"
alias dpidof="docker inspect --format {{.State.Pid}}"
alias -g TMUX="script /dev/null -c 'TERM=xterm bash -ilc tmux -2'"
alias dex="docker exec -it"


### rails dev

alias rails="bundle exec rails"
alias rake="bundle exec rake"
alias brakeman="bundle exec brakeman"
alias slim-lint="bundle exec slim-lint"
alias mrspec="bundle exec mrspec"
alias check_rc="bundle exec rubocop -R -fs -P"

function test_plugin { mrspec plugins/$1/test/; shift; "$@" }
function slim_lint_plugin {
    bundle exec slim-lint -c plugins/$1/.slim-lint.yml plugins/$1;
    }
function lint_plugin {
    bundle exec rubocop -R -fs -P --except Metrics/MethodLength,Metrics/CyclomaticComplexity plugins/$1;
    bundle exec slim-lint -c plugins/$1/.slim-lint.yml plugins/$1;
    }
function lint_rc_changed {
    git --work-tree=plugins/$1 --git-dir plugins/$1/.git ls-files -m --others --exclude-standard | grep '\.rb$' | xargs printf -- "plugins/$1/%s\n" | xargs bundle exec rubocop -R -fs -P
    git --work-tree=plugins/$1 --git-dir plugins/$1/.git ls-files -m --others --exclude-standard | grep '\.slim$' | xargs printf -- "plugins/$1/%s\n" | xargs bundle exec slim-lint -c plugins/$1/.slim-lint.yml
}
function lint_fix_rc_changed {
    git --work-tree=plugins/$1 --git-dir plugins/$1/.git ls-files -m --others --exclude-standard | grep '\.rb$' | xargs printf -- "plugins/$1/%s\n" | xargs bundle exec rubocop -a
    bundle exec slim-lint -c plugins/$1/.slim-lint.yml plugins/$1;
}


### Nix

function update-persistent-nix-shell() {
    nix-instantiate --indirect --add-root $PWD/shell.drv
}


### other

alias pcwd="source ~/.scripts/pcwd"
alias newest_file="ls -1t | head -n1"
alias dum='du -m --max-depth=1'
alias sl='ls --color'
alias tz="tar xzf"
alias tj="tar xjf"
alias ls="ls --color"
alias rs="rsync -a --stats --rsh='ssh -p 35'"
alias rsl="rsync -a --stats --rsh='ssh -p 35 -oNoneEnabled=yes -oNoneSwitch=yes -oHPNBufferSize=8192 -v'"
alias rsn="rsync -a --stats --rsh='ssh -p 22'"
alias m="mount"
alias pstat="python -mpstats"
alias shm="cd /dev/shm"
alias py=python
alias ll="exa -l"
alias la="exa -la"
alias fu="fuck"
alias svi="sudo -E vim"
alias run="zsh .runrc"


### global aliases

alias -g X="| tr -d '\n' | xclip"
alias -g F="| fzf"

command -v thefuck && eval $(thefuck --alias)

# run commands via SSH like: RUN="program opt1" zsh
# # http://superuser.com/a/790681
eval "$RUN"

# connect via SSH and attach / create tmux session. Detaching the session also disconnects.
function ssht () { ssh -t $@ "tmux -CC attach || tmux -CC new" }

# first attempt at a personal knowledge base ;)
function tip() { psql -c "INSERT INTO selftweet (id, content) VALUES('`uuidgen`', '@tip $*')" }
function sts() { psql -c "select * from selftweet where to_tsvector('german', content) @@ plainto_tsquery('german', '$*');" }

# build a single nix package from my personal collection dir
function nb() {
    PKG=$1
	shift
	nix-build --arg pkg $PKG "$@"
}

function nbu() { nb "$@" --argstr channel unstable }

function update_pipenv() { pipenv update && git commit Pipfile.lock -m "update Pipenv.lock"  }

# pretty json output with formatting, highlighting (by jq) and line numbers (by bat)
function jat { jq '.' -C < "$1" | bat }

# interactively find a PID from verbose ps output and print it
function fpid { ps aux | fzf -m -q "$@" | awk '{ print $2 }' }

# nix search with json output and jq filtering, can be piped to jid for interactive filtering
function nis() { search=$1; shift; nix search --json $search | jq "$@" }

rwhich() {
    WHICH=`which $1`
    if [[ $? == 0 ]] then 
        readlink -f $WHICH
    else
        echo $WHICH
    fi
}

nish() { 
    nix-shell -p "$@" --run zsh 
}
